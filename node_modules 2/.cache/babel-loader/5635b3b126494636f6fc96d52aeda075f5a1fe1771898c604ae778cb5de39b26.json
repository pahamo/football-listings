{"ast":null,"code":"export const slugify = text => {\n  return text.toLowerCase().replace(/[^\\w\\s-]/g, '') // Remove special characters\n  .replace(/\\s+/g, '-') // Replace spaces with hyphens\n  .replace(/-+/g, '-') // Replace multiple hyphens with single\n  .trim();\n};\nexport const formatDateForUrl = date => {\n  return new Date(date).toISOString().split('T')[0]; // YYYY-MM-DD\n};\nexport const generateMatchSlug = fixture => {\n  const homeSlug = slugify(fixture.home.name);\n  const awaySlug = slugify(fixture.away.name);\n  const dateSlug = formatDateForUrl(fixture.kickoff_utc);\n  return `${fixture.id}-${homeSlug}-vs-${awaySlug}-${dateSlug}`;\n};\nexport const parseMatchSlug = slug => {\n  // Extract ID from the beginning of the slug\n  const match = slug.match(/^(\\d+)-/);\n  return match ? parseInt(match[1], 10) : null;\n};\nexport const generateMatchUrl = fixture => {\n  return `/matches/${generateMatchSlug(fixture)}`;\n};\nexport const updateDocumentMeta = meta => {\n  // Update title\n  if (meta.title) {\n    document.title = meta.title;\n  }\n\n  // Helper function to update or create meta tag\n  const updateMetaTag = (property, content, isProperty = false) => {\n    const selector = isProperty ? `meta[property=\"${property}\"]` : `meta[name=\"${property}\"]`;\n    let metaTag = document.querySelector(selector);\n    if (!metaTag) {\n      metaTag = document.createElement('meta');\n      if (isProperty) {\n        metaTag.setAttribute('property', property);\n      } else {\n        metaTag.setAttribute('name', property);\n      }\n      document.head.appendChild(metaTag);\n    }\n    metaTag.setAttribute('content', content);\n  };\n\n  // Update description\n  if (meta.description) {\n    updateMetaTag('description', meta.description);\n  }\n\n  // Update canonical URL\n  if (meta.canonical) {\n    let canonicalLink = document.querySelector('link[rel=\"canonical\"]');\n    if (!canonicalLink) {\n      canonicalLink = document.createElement('link');\n      canonicalLink.setAttribute('rel', 'canonical');\n      document.head.appendChild(canonicalLink);\n    }\n    canonicalLink.setAttribute('href', meta.canonical);\n  }\n\n  // Update Open Graph tags\n  if (meta.ogTitle) {\n    updateMetaTag('og:title', meta.ogTitle, true);\n  }\n  if (meta.ogDescription) {\n    updateMetaTag('og:description', meta.ogDescription, true);\n  }\n  if (meta.ogImage) {\n    updateMetaTag('og:image', meta.ogImage, true);\n  }\n  if (meta.ogUrl) {\n    updateMetaTag('og:url', meta.ogUrl, true);\n  }\n\n  // Always set og:type for consistency\n  updateMetaTag('og:type', 'website', true);\n};\nexport const generateMatchMeta = fixture => {\n  var _fixture$blackout, _fixture$blackout2;\n  const date = new Date(fixture.kickoff_utc).toLocaleDateString('en-GB', {\n    day: 'numeric',\n    month: 'short',\n    year: 'numeric'\n  });\n  const broadcaster = (_fixture$blackout = fixture.blackout) !== null && _fixture$blackout !== void 0 && _fixture$blackout.is_blackout ? 'Not available in UK' : fixture.providers_uk.length > 0 ? fixture.providers_uk.map(p => p.name).join(', ') : 'TBD';\n  const title = `${fixture.home.name} vs ${fixture.away.name} - Premier League TV Guide`;\n  const description = `${fixture.home.name} vs ${fixture.away.name} on ${date}. ${(_fixture$blackout2 = fixture.blackout) !== null && _fixture$blackout2 !== void 0 && _fixture$blackout2.is_blackout ? 'Not shown on UK TV.' : fixture.providers_uk.length > 0 ? `Watch on ${broadcaster}.` : 'Broadcaster to be confirmed.'} UK Premier League TV schedule.`;\n  const ogImage = fixture.home.crest || fixture.away.crest || '/logo192.png';\n  const canonical = `https://fixturesapp.netlify.app${generateMatchUrl(fixture)}`;\n  return {\n    title,\n    description,\n    canonical,\n    ogTitle: title,\n    ogDescription: description,\n    ogImage: ogImage,\n    ogUrl: canonical\n  };\n};\nexport const generateTeamMeta = (team, upcomingCount = 0) => {\n  const title = `${team.name} fixtures and TV schedule - Premier League`;\n  const description = `${team.name} upcoming Premier League fixtures and TV schedule. ${upcomingCount} matches remaining. Sky Sports, TNT Sports, BBC viewing guide.`;\n  const canonical = `https://fixturesapp.netlify.app/clubs/${team.slug}`;\n  return {\n    title,\n    description,\n    canonical,\n    ogTitle: title,\n    ogDescription: description,\n    ogImage: team.crest || '/logo192.png',\n    ogUrl: canonical\n  };\n};\nexport const generateHomeMeta = () => {\n  const title = 'fixtures.app - Premier League TV Guide UK';\n  const description = 'Premier League TV Guide UK - Sky Sports & TNT Sports fixtures. Find which broadcaster shows every Premier League match.';\n  const canonical = 'https://fixturesapp.netlify.app/';\n  return {\n    title,\n    description,\n    canonical,\n    ogTitle: title,\n    ogDescription: description,\n    ogImage: '/logo192.png',\n    ogUrl: canonical\n  };\n};\nexport const generateFixturesMeta = () => {\n  const title = 'Premier League Fixtures & TV Schedule - fixtures.app';\n  const description = 'Complete Premier League fixtures and TV schedule. Filter by team, matchweek, and broadcaster. Sky Sports, TNT Sports, BBC viewing guide.';\n  const canonical = 'https://fixturesapp.netlify.app/fixtures';\n  return {\n    title,\n    description,\n    canonical,\n    ogTitle: title,\n    ogDescription: description,\n    ogImage: '/logo192.png',\n    ogUrl: canonical\n  };\n};\nexport const generateClubsMeta = () => {\n  const title = 'Premier League Teams - fixtures.app';\n  const description = 'All 20 Premier League teams. View fixtures, TV schedules, and viewing guides for every club.';\n  const canonical = 'https://fixturesapp.netlify.app/clubs';\n  return {\n    title,\n    description,\n    canonical,\n    ogTitle: title,\n    ogDescription: description,\n    ogImage: '/logo192.png',\n    ogUrl: canonical\n  };\n};","map":{"version":3,"names":["slugify","text","toLowerCase","replace","trim","formatDateForUrl","date","Date","toISOString","split","generateMatchSlug","fixture","homeSlug","home","name","awaySlug","away","dateSlug","kickoff_utc","id","parseMatchSlug","slug","match","parseInt","generateMatchUrl","updateDocumentMeta","meta","title","document","updateMetaTag","property","content","isProperty","selector","metaTag","querySelector","createElement","setAttribute","head","appendChild","description","canonical","canonicalLink","ogTitle","ogDescription","ogImage","ogUrl","generateMatchMeta","_fixture$blackout","_fixture$blackout2","toLocaleDateString","day","month","year","broadcaster","blackout","is_blackout","providers_uk","length","map","p","join","crest","generateTeamMeta","team","upcomingCount","generateHomeMeta","generateFixturesMeta","generateClubsMeta"],"sources":["/Users/p/Documents/pl_tv_mvp_spa/react-version/src/utils/seo.ts"],"sourcesContent":["import type { Fixture, Team } from '../types';\nimport type { SimpleFixture } from '../services/supabase-simple';\n\nexport const slugify = (text: string): string => {\n  return text\n    .toLowerCase()\n    .replace(/[^\\w\\s-]/g, '') // Remove special characters\n    .replace(/\\s+/g, '-') // Replace spaces with hyphens\n    .replace(/-+/g, '-') // Replace multiple hyphens with single\n    .trim();\n};\n\nexport const formatDateForUrl = (date: string): string => {\n  return new Date(date).toISOString().split('T')[0]; // YYYY-MM-DD\n};\n\nexport const generateMatchSlug = (fixture: Fixture): string => {\n  const homeSlug = slugify(fixture.home.name);\n  const awaySlug = slugify(fixture.away.name);\n  const dateSlug = formatDateForUrl(fixture.kickoff_utc);\n  \n  return `${fixture.id}-${homeSlug}-vs-${awaySlug}-${dateSlug}`;\n};\n\nexport const parseMatchSlug = (slug: string): number | null => {\n  // Extract ID from the beginning of the slug\n  const match = slug.match(/^(\\d+)-/);\n  return match ? parseInt(match[1], 10) : null;\n};\n\nexport const generateMatchUrl = (fixture: Fixture): string => {\n  return `/matches/${generateMatchSlug(fixture)}`;\n};\n\nexport const updateDocumentMeta = (meta: {\n  title?: string;\n  description?: string;\n  canonical?: string;\n  ogTitle?: string;\n  ogDescription?: string;\n  ogImage?: string;\n  ogUrl?: string;\n}) => {\n  // Update title\n  if (meta.title) {\n    document.title = meta.title;\n  }\n\n  // Helper function to update or create meta tag\n  const updateMetaTag = (property: string, content: string, isProperty = false) => {\n    const selector = isProperty ? `meta[property=\"${property}\"]` : `meta[name=\"${property}\"]`;\n    let metaTag = document.querySelector(selector) as HTMLMetaElement;\n    \n    if (!metaTag) {\n      metaTag = document.createElement('meta');\n      if (isProperty) {\n        metaTag.setAttribute('property', property);\n      } else {\n        metaTag.setAttribute('name', property);\n      }\n      document.head.appendChild(metaTag);\n    }\n    \n    metaTag.setAttribute('content', content);\n  };\n\n  // Update description\n  if (meta.description) {\n    updateMetaTag('description', meta.description);\n  }\n\n  // Update canonical URL\n  if (meta.canonical) {\n    let canonicalLink = document.querySelector('link[rel=\"canonical\"]') as HTMLLinkElement;\n    if (!canonicalLink) {\n      canonicalLink = document.createElement('link');\n      canonicalLink.setAttribute('rel', 'canonical');\n      document.head.appendChild(canonicalLink);\n    }\n    canonicalLink.setAttribute('href', meta.canonical);\n  }\n\n  // Update Open Graph tags\n  if (meta.ogTitle) {\n    updateMetaTag('og:title', meta.ogTitle, true);\n  }\n\n  if (meta.ogDescription) {\n    updateMetaTag('og:description', meta.ogDescription, true);\n  }\n\n  if (meta.ogImage) {\n    updateMetaTag('og:image', meta.ogImage, true);\n  }\n\n  if (meta.ogUrl) {\n    updateMetaTag('og:url', meta.ogUrl, true);\n  }\n\n  // Always set og:type for consistency\n  updateMetaTag('og:type', 'website', true);\n};\n\nexport const generateMatchMeta = (fixture: Fixture) => {\n  const date = new Date(fixture.kickoff_utc).toLocaleDateString('en-GB', {\n    day: 'numeric',\n    month: 'short',\n    year: 'numeric'\n  });\n\n  const broadcaster = fixture.blackout?.is_blackout \n    ? 'Not available in UK' \n    : fixture.providers_uk.length > 0 \n      ? fixture.providers_uk.map(p => p.name).join(', ')\n      : 'TBD';\n\n  const title = `${fixture.home.name} vs ${fixture.away.name} - Premier League TV Guide`;\n  \n  const description = `${fixture.home.name} vs ${fixture.away.name} on ${date}. ${\n    fixture.blackout?.is_blackout \n      ? 'Not shown on UK TV.' \n      : fixture.providers_uk.length > 0 \n        ? `Watch on ${broadcaster}.` \n        : 'Broadcaster to be confirmed.'\n  } UK Premier League TV schedule.`;\n\n  const ogImage = fixture.home.crest || fixture.away.crest || '/logo192.png';\n  const canonical = `https://fixturesapp.netlify.app${generateMatchUrl(fixture)}`;\n\n  return {\n    title,\n    description,\n    canonical,\n    ogTitle: title,\n    ogDescription: description,\n    ogImage: ogImage,\n    ogUrl: canonical\n  };\n};\n\nexport const generateTeamMeta = (team: Team, upcomingCount: number = 0) => {\n  const title = `${team.name} fixtures and TV schedule - Premier League`;\n  const description = `${team.name} upcoming Premier League fixtures and TV schedule. ${upcomingCount} matches remaining. Sky Sports, TNT Sports, BBC viewing guide.`;\n  const canonical = `https://fixturesapp.netlify.app/clubs/${team.slug}`;\n\n  return {\n    title,\n    description,\n    canonical,\n    ogTitle: title,\n    ogDescription: description,\n    ogImage: team.crest || '/logo192.png',\n    ogUrl: canonical\n  };\n};\n\nexport const generateHomeMeta = () => {\n  const title = 'fixtures.app - Premier League TV Guide UK';\n  const description = 'Premier League TV Guide UK - Sky Sports & TNT Sports fixtures. Find which broadcaster shows every Premier League match.';\n  const canonical = 'https://fixturesapp.netlify.app/';\n\n  return {\n    title,\n    description,\n    canonical,\n    ogTitle: title,\n    ogDescription: description,\n    ogImage: '/logo192.png',\n    ogUrl: canonical\n  };\n};\n\nexport const generateFixturesMeta = () => {\n  const title = 'Premier League Fixtures & TV Schedule - fixtures.app';\n  const description = 'Complete Premier League fixtures and TV schedule. Filter by team, matchweek, and broadcaster. Sky Sports, TNT Sports, BBC viewing guide.';\n  const canonical = 'https://fixturesapp.netlify.app/fixtures';\n\n  return {\n    title,\n    description,\n    canonical,\n    ogTitle: title,\n    ogDescription: description,\n    ogImage: '/logo192.png',\n    ogUrl: canonical\n  };\n};\n\nexport const generateClubsMeta = () => {\n  const title = 'Premier League Teams - fixtures.app';\n  const description = 'All 20 Premier League teams. View fixtures, TV schedules, and viewing guides for every club.';\n  const canonical = 'https://fixturesapp.netlify.app/clubs';\n\n  return {\n    title,\n    description,\n    canonical,\n    ogTitle: title,\n    ogDescription: description,\n    ogImage: '/logo192.png',\n    ogUrl: canonical\n  };\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}