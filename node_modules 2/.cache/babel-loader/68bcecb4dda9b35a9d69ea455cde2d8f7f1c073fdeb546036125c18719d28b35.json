{"ast":null,"code":"import _objectSpread from\"/Users/p/Documents/pl_tv_mvp_spa/react-version/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import{createClient}from'@supabase/supabase-js';// Require credentials from environment variables\nconst supabaseUrl=process.env.REACT_APP_SUPABASE_URL;const supabaseAnonKey=process.env.REACT_APP_SUPABASE_ANON_KEY;if(!supabaseUrl||!supabaseAnonKey){throw new Error('[Supabase] Missing REACT_APP_SUPABASE_URL or REACT_APP_SUPABASE_ANON_KEY');}export const supabase=createClient(supabaseUrl,supabaseAnonKey);function mapFixtureRow(row){var _row$matchday,_row$venue;let providersByFixture=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};const kickoffIso=row.utc_kickoff;const mw=(_row$matchday=row.matchday)!==null&&_row$matchday!==void 0?_row$matchday:null;const home={id:row.home_team_id,name:row.home_team,slug:row.home_slug,crest:row.home_crest||null};const away={id:row.away_team_id,name:row.away_team,slug:row.away_slug,crest:row.away_crest||null};const providers=providersByFixture[row.id]||[];// Check blackout status from localStorage (matching original SPA logic)\nconst blackoutFixtures=JSON.parse(localStorage.getItem('blackoutFixtures')||'[]');const isBlackout=blackoutFixtures.includes(row.id);return{id:row.id,sport:'football',competition:'premier-league',matchweek:mw,kickoff_utc:kickoffIso,venue:(_row$venue=row.venue)!==null&&_row$venue!==void 0?_row$venue:null,home,away,providers_uk:providers,blackout:{is_blackout:isBlackout,reason:isBlackout?'No UK broadcaster announced':null},status:row.status||'scheduled'};}async function getBroadcastsForFixtures(ids){try{if(!ids||!ids.length)return[];const{data,error}=await supabase.from('broadcasts').select('fixture_id,provider_id').in('fixture_id',ids);if(error){console.warn('[Supabase] getBroadcastsForFixtures error',error);return[];}return data||[];}catch(e){console.warn('[Supabase] getBroadcastsForFixtures error',e);return[];}}async function getProvidersByIds(){let ids=arguments.length>0&&arguments[0]!==undefined?arguments[0]:[];let rows=null;try{let query=supabase.from('providers').select('id,display_name,name,type').order('display_name',{ascending:true});if(ids.length>0){query=query.in('id',ids);}const resp=await query;if(resp.error){console.warn('[Supabase] getProvidersByIds error',resp.error);}else{rows=resp.data;}}catch(e){console.warn('[Supabase] getProvidersByIds exception',e);}const mapped=(rows||[]).map(p=>({id:String(p.id),name:p.display_name||p.name||'Unknown',type:p.type||'unknown',href:undefined,status:'confirmed'}));// Fallbacks for common UK providers in case providers table is incomplete\nconst byId=new Map(mapped.map(p=>[p.id,p]));const ensure=(numId,name,href)=>{const key=String(numId);if(!byId.has(key)&&ids.includes(numId)){byId.set(key,{id:key,name,type:'tv',href,status:'confirmed'});}};ensure(1,'Sky Sports','https://www.skysports.com/football/fixtures-results');ensure(2,'TNT Sports','https://tntsports.co.uk/football');return Array.from(byId.values());}export async function getFixtures(){let params=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};try{const{teamSlug,dateFrom,dateTo,limit=100,order='asc',competitionId}=params;let query=supabase.from('fixtures_with_teams').select(\"\\n        id,matchday,utc_kickoff,venue,status,\\n        home_team_id,home_team,home_slug,home_crest,\\n        away_team_id,away_team,away_slug,away_crest\\n      \").order('utc_kickoff',{ascending:order==='asc'}).limit(limit);if(dateFrom){query=query.gte('utc_kickoff',dateFrom);}if(dateTo){query=query.lte('utc_kickoff',dateTo);}if(competitionId){query=query.eq('competition_id',competitionId);}const{data:rows,error}=await query;if(error){console.warn('[Supabase] getFixtures error',error);return[];}if(!rows||!rows.length)return[];// Enrich providers in a second step\nconst ids=rows.map(r=>r.id).filter(Boolean);let providersByFixture={};if(ids.length){const bcasts=await getBroadcastsForFixtures(ids);const providerIds=Array.from(new Set(bcasts.map(b=>b.provider_id).filter(Boolean)));const provs=providerIds.length?await getProvidersByIds(providerIds):[];const byPk=Object.fromEntries(provs.map(p=>[p.id,p]));for(const b of bcasts){const fId=b.fixture_id;const key=String(b.provider_id);const p=byPk[key];const entry=p?_objectSpread({},p):undefined;if(!providersByFixture[fId])providersByFixture[fId]=[];if(entry)providersByFixture[fId].push(entry);}}let mapped=rows.map(r=>mapFixtureRow(r,providersByFixture));// Apply team filter if specified\nif(teamSlug){mapped=mapped.filter(fx=>fx.home.slug===teamSlug||fx.away.slug===teamSlug);}// Apply filtering logic to exclude test fixtures (IDs <= 30)\n// This matches the current SPA's filtering logic\nmapped=mapped.filter(f=>f.id&&f.id>30);return mapped;}catch(e){console.warn('[Supabase] getFixtures error',e);return[];}}export async function getFixtureById(id){try{if(!id)return undefined;const{data:rows,error}=await supabase.from('fixtures_with_teams').select(\"\\n        id,matchday,utc_kickoff,venue,status,\\n        home_team_id,home_team,home_slug,home_crest,\\n        away_team_id,away_team,away_slug,away_crest\\n      \").eq('id',id).limit(1);if(error){console.warn('[Supabase] getFixtureById error',error);return undefined;}const row=rows===null||rows===void 0?void 0:rows[0];if(!row)return undefined;const bcasts=await getBroadcastsForFixtures([row.id]);const providerIds=Array.from(new Set(bcasts.map(b=>b.provider_id).filter(Boolean)));const provs=providerIds.length?await getProvidersByIds(providerIds):[];const byPk=Object.fromEntries(provs.map(p=>[p.id,p]));const providersByFixture={};providersByFixture[row.id]=bcasts.map(b=>{const p=byPk[String(b.provider_id)];return p?_objectSpread({},p):null;}).filter(Boolean);return mapFixtureRow(row,providersByFixture);}catch(e){console.warn('[Supabase] getFixtureById error',e);return undefined;}}// Admin API functions\nexport const BROADCASTERS=[{id:1,name:'Sky Sports',type:'tv'},{id:2,name:'TNT Sports',type:'tv'},{id:3,name:'BBC Sport',type:'tv'},{id:4,name:'Amazon Prime Video',type:'streaming'},{id:-1,name:'ðŸš« Blackout (No TV)',type:'blackout'}];export async function getAdminFixtures(){let competitionId=arguments.length>0&&arguments[0]!==undefined?arguments[0]:1;try{// Get fixtures from current season\nconst currentSeasonStart='2024-08-01T00:00:00.000Z';const{data:rows,error}=await supabase.from('fixtures_with_teams').select(\"\\n        id,matchday,utc_kickoff,venue,status,\\n        home_team_id,home_team,home_slug,home_crest,\\n        away_team_id,away_team,away_slug,away_crest\\n      \").eq('competition_id',competitionId).gte('utc_kickoff',currentSeasonStart).order('utc_kickoff',{ascending:true});if(error){console.warn('[Supabase] getAdminFixtures error',error);return[];}if(!rows||!rows.length)return[];// Apply same filtering as main app (exclude test fixtures)\nconst validRows=rows.filter(r=>r.id&&r.id>30);// Get all broadcasts for these fixtures\nconst fixtureIds=validRows.map(r=>r.id);const{data:broadcasts,error:broadcastError}=await supabase.from('broadcasts').select('fixture_id,provider_id').in('fixture_id',fixtureIds);if(broadcastError){console.warn('[Supabase] Error loading broadcasts:',broadcastError);}// Create broadcast lookup\nconst broadcastLookup={};(broadcasts||[]).forEach(b=>{broadcastLookup[b.fixture_id]=b;});// Map fixtures with broadcast info\nconst adminFixtures=validRows.map(row=>{var _BROADCASTERS$find;const broadcast=broadcastLookup[row.id]||null;const fixture=mapFixtureRow(row);return _objectSpread(_objectSpread({},fixture),{},{broadcast:broadcast?{provider_id:broadcast.provider_id,provider_display_name:((_BROADCASTERS$find=BROADCASTERS.find(b=>b.id===broadcast.provider_id))===null||_BROADCASTERS$find===void 0?void 0:_BROADCASTERS$find.name)||'Unknown'}:null});});return adminFixtures;}catch(e){console.warn('[Supabase] getAdminFixtures error',e);return[];}}export async function saveBroadcast(fixtureId,providerId){try{if(providerId===''||providerId==='0'||providerId==='-1'||providerId===null){// Delete existing broadcast record\nconst{error}=await supabase.from('broadcasts').delete().eq('fixture_id',fixtureId);if(error){throw error;}// Handle blackout localStorage logic\nif(providerId==='-1'){const blackoutFixtures=JSON.parse(localStorage.getItem('blackoutFixtures')||'[]');if(!blackoutFixtures.includes(fixtureId)){blackoutFixtures.push(fixtureId);localStorage.setItem('blackoutFixtures',JSON.stringify(blackoutFixtures));}}else{// Remove from blackout list if setting to empty\nconst blackoutFixtures=JSON.parse(localStorage.getItem('blackoutFixtures')||'[]');const updatedBlackout=blackoutFixtures.filter(id=>id!==fixtureId);localStorage.setItem('blackoutFixtures',JSON.stringify(updatedBlackout));}}else{// Add/update broadcaster - remove from blackout list first\nconst blackoutFixtures=JSON.parse(localStorage.getItem('blackoutFixtures')||'[]');const updatedBlackout=blackoutFixtures.filter(id=>id!==fixtureId);localStorage.setItem('blackoutFixtures',JSON.stringify(updatedBlackout));const broadcastData={fixture_id:fixtureId,provider_id:parseInt(String(providerId))};// Upsert the broadcast record\nconst{error}=await supabase.from('broadcasts').upsert(broadcastData);if(error){throw error;}}}catch(e){console.error('[Supabase] saveBroadcast error',e);throw e;}}// Blackout helper functions\nexport function isFixtureBlackout(fixtureId){const blackoutFixtures=JSON.parse(localStorage.getItem('blackoutFixtures')||'[]');return blackoutFixtures.includes(fixtureId);}export function isFixtureConfirmed(fixture){return!!(fixture.broadcast&&fixture.broadcast.provider_id&&!isFixtureBlackout(fixture.id));}export function isFixturePending(fixture){return!fixture.broadcast&&!isFixtureBlackout(fixture.id);}// Teams API\nexport async function getTeams(){try{const{data,error}=await supabase.from('teams').select('id,name,slug,crest_url').eq('is_active',true).order('name',{ascending:true});if(error){console.warn('[Supabase] getTeams error',error);return[];}return(data||[]).map(t=>{var _t$crest_url;return{id:t.id,name:t.name,slug:t.slug,crest:(_t$crest_url=t.crest_url)!==null&&_t$crest_url!==void 0?_t$crest_url:null};});}catch(e){console.warn('[Supabase] getTeams error',e);return[];}}","map":{"version":3,"names":["createClient","supabaseUrl","process","env","REACT_APP_SUPABASE_URL","supabaseAnonKey","REACT_APP_SUPABASE_ANON_KEY","Error","supabase","mapFixtureRow","row","_row$matchday","_row$venue","providersByFixture","arguments","length","undefined","kickoffIso","utc_kickoff","mw","matchday","home","id","home_team_id","name","home_team","slug","home_slug","crest","home_crest","away","away_team_id","away_team","away_slug","away_crest","providers","blackoutFixtures","JSON","parse","localStorage","getItem","isBlackout","includes","sport","competition","matchweek","kickoff_utc","venue","providers_uk","blackout","is_blackout","reason","status","getBroadcastsForFixtures","ids","data","error","from","select","in","console","warn","e","getProvidersByIds","rows","query","order","ascending","resp","mapped","map","p","String","display_name","type","href","byId","Map","ensure","numId","key","has","set","Array","values","getFixtures","params","teamSlug","dateFrom","dateTo","limit","competitionId","gte","lte","eq","r","filter","Boolean","bcasts","providerIds","Set","b","provider_id","provs","byPk","Object","fromEntries","fId","fixture_id","entry","_objectSpread","push","fx","f","getFixtureById","BROADCASTERS","getAdminFixtures","currentSeasonStart","validRows","fixtureIds","broadcasts","broadcastError","broadcastLookup","forEach","adminFixtures","_BROADCASTERS$find","broadcast","fixture","provider_display_name","find","saveBroadcast","fixtureId","providerId","delete","setItem","stringify","updatedBlackout","broadcastData","parseInt","upsert","isFixtureBlackout","isFixtureConfirmed","isFixturePending","getTeams","t","_t$crest_url","crest_url"],"sources":["/Users/p/Documents/pl_tv_mvp_spa/react-version/src/services/supabase.ts"],"sourcesContent":["import { createClient } from '@supabase/supabase-js';\nimport type { Fixture, FixturesApiParams, Provider, Team } from '../types';\n\n// Require credentials from environment variables\nconst supabaseUrl = process.env.REACT_APP_SUPABASE_URL;\nconst supabaseAnonKey = process.env.REACT_APP_SUPABASE_ANON_KEY;\n\nif (!supabaseUrl || !supabaseAnonKey) {\n  throw new Error('[Supabase] Missing REACT_APP_SUPABASE_URL or REACT_APP_SUPABASE_ANON_KEY');\n}\n\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey);\n\ninterface FixtureRow {\n  id: number;\n  matchday?: number | null;\n  utc_kickoff: string;\n  venue?: string | null;\n  status?: string;\n  home_team_id: number;\n  home_team: string;\n  home_slug: string;\n  home_crest?: string | null;\n  away_team_id: number;\n  away_team: string;\n  away_slug: string;\n  away_crest?: string | null;\n}\n\ninterface BroadcastRow {\n  fixture_id: number;\n  provider_id: number;\n}\n\ninterface ProviderRow {\n  id: number;\n  display_name?: string;\n  name?: string;\n  type?: string;\n  url?: string;\n}\n\nfunction mapFixtureRow(row: FixtureRow, providersByFixture: Record<number, Provider[]> = {}): Fixture {\n  const kickoffIso = row.utc_kickoff;\n  const mw = row.matchday ?? null;\n  const home: Team = {\n    id: row.home_team_id,\n    name: row.home_team,\n    slug: row.home_slug,\n    crest: row.home_crest || null,\n  };\n  const away: Team = {\n    id: row.away_team_id,\n    name: row.away_team,\n    slug: row.away_slug,\n    crest: row.away_crest || null,\n  };\n  const providers = providersByFixture[row.id] || [];\n\n  // Check blackout status from localStorage (matching original SPA logic)\n  const blackoutFixtures = JSON.parse(localStorage.getItem('blackoutFixtures') || '[]');\n  const isBlackout = blackoutFixtures.includes(row.id);\n\n  return {\n    id: row.id,\n    sport: 'football',\n    competition: 'premier-league',\n    matchweek: mw,\n    kickoff_utc: kickoffIso,\n    venue: row.venue ?? null,\n    home,\n    away,\n    providers_uk: providers,\n    blackout: { \n      is_blackout: isBlackout, \n      reason: isBlackout ? 'No UK broadcaster announced' : null \n    },\n    status: row.status || 'scheduled',\n  };\n}\n\nasync function getBroadcastsForFixtures(ids: number[]): Promise<BroadcastRow[]> {\n  try {\n    if (!ids || !ids.length) return [];\n    \n    const { data, error } = await supabase\n      .from('broadcasts')\n      .select('fixture_id,provider_id')\n      .in('fixture_id', ids);\n      \n    if (error) {\n      console.warn('[Supabase] getBroadcastsForFixtures error', error);\n      return [];\n    }\n    \n    return data || [];\n  } catch (e) {\n    console.warn('[Supabase] getBroadcastsForFixtures error', e);\n    return [];\n  }\n}\n\nasync function getProvidersByIds(ids: number[] = []): Promise<Provider[]> {\n  let rows: ProviderRow[] | null = null;\n  try {\n    let query = supabase\n      .from('providers')\n      .select('id,display_name,name,type')\n      .order('display_name', { ascending: true });\n\n    if (ids.length > 0) {\n      query = query.in('id', ids);\n    }\n\n    const resp = await query;\n    if (resp.error) {\n      console.warn('[Supabase] getProvidersByIds error', resp.error);\n    } else {\n      rows = resp.data as any;\n    }\n  } catch (e) {\n    console.warn('[Supabase] getProvidersByIds exception', e);\n  }\n\n  const mapped = (rows || []).map((p: ProviderRow) => ({\n    id: String(p.id),\n    name: p.display_name || p.name || 'Unknown',\n    type: p.type || 'unknown',\n    href: undefined,\n    status: 'confirmed',\n  }));\n\n  // Fallbacks for common UK providers in case providers table is incomplete\n  const byId = new Map<string, Provider>(mapped.map(p => [p.id, p]));\n  const ensure = (numId: number, name: string, href: string) => {\n    const key = String(numId);\n    if (!byId.has(key) && ids.includes(numId)) {\n      byId.set(key, { id: key, name, type: 'tv', href, status: 'confirmed' });\n    }\n  };\n  ensure(1, 'Sky Sports', 'https://www.skysports.com/football/fixtures-results');\n  ensure(2, 'TNT Sports', 'https://tntsports.co.uk/football');\n\n  return Array.from(byId.values());\n}\n\nexport async function getFixtures(params: FixturesApiParams = {}): Promise<Fixture[]> {\n  try {\n    const {\n      teamSlug,\n      dateFrom,\n      dateTo,\n      limit = 100,\n      order = 'asc',\n      competitionId\n    } = params;\n\n    let query = supabase\n      .from('fixtures_with_teams')\n      .select(`\n        id,matchday,utc_kickoff,venue,status,\n        home_team_id,home_team,home_slug,home_crest,\n        away_team_id,away_team,away_slug,away_crest\n      `)\n      .order('utc_kickoff', { ascending: order === 'asc' })\n      .limit(limit);\n      \n    if (dateFrom) {\n      query = query.gte('utc_kickoff', dateFrom);\n    }\n    if (dateTo) {\n      query = query.lte('utc_kickoff', dateTo);\n    }\n    if (competitionId) {\n      query = query.eq('competition_id', competitionId);\n    }\n\n    const { data: rows, error } = await query;\n    \n    if (error) {\n      console.warn('[Supabase] getFixtures error', error);\n      return [];\n    }\n    \n    if (!rows || !rows.length) return [];\n\n    // Enrich providers in a second step\n    const ids = rows.map(r => r.id).filter(Boolean);\n    let providersByFixture: Record<number, Provider[]> = {};\n    \n    if (ids.length) {\n      const bcasts = await getBroadcastsForFixtures(ids);\n      const providerIds = Array.from(new Set(bcasts.map(b => b.provider_id).filter(Boolean)));\n      const provs = providerIds.length ? await getProvidersByIds(providerIds) : [];\n      const byPk = Object.fromEntries(provs.map(p => [p.id, p]));\n\n      for (const b of bcasts) {\n        const fId = b.fixture_id;\n        const key = String(b.provider_id);\n        const p = byPk[key];\n        const entry = p ? { ...p } : undefined;\n        if (!providersByFixture[fId]) providersByFixture[fId] = [];\n        if (entry) providersByFixture[fId].push(entry);\n      }\n    }\n    \n    let mapped = rows.map(r => mapFixtureRow(r, providersByFixture));\n\n    // Apply team filter if specified\n    if (teamSlug) {\n      mapped = mapped.filter(fx => fx.home.slug === teamSlug || fx.away.slug === teamSlug);\n    }\n    \n    // Apply filtering logic to exclude test fixtures (IDs <= 30)\n    // This matches the current SPA's filtering logic\n    mapped = mapped.filter(f => f.id && f.id > 30);\n    \n    return mapped;\n  } catch (e) {\n    console.warn('[Supabase] getFixtures error', e);\n    return [];\n  }\n}\n\nexport async function getFixtureById(id: number): Promise<Fixture | undefined> {\n  try {\n    if (!id) return undefined;\n    \n    const { data: rows, error } = await supabase\n      .from('fixtures_with_teams')\n      .select(`\n        id,matchday,utc_kickoff,venue,status,\n        home_team_id,home_team,home_slug,home_crest,\n        away_team_id,away_team,away_slug,away_crest\n      `)\n      .eq('id', id)\n      .limit(1);\n      \n    if (error) {\n      console.warn('[Supabase] getFixtureById error', error);\n      return undefined;\n    }\n    \n    const row = rows?.[0];\n    if (!row) return undefined;\n    \n    const bcasts = await getBroadcastsForFixtures([row.id]);\n    const providerIds = Array.from(new Set(bcasts.map(b => b.provider_id).filter(Boolean)));\n    const provs = providerIds.length ? await getProvidersByIds(providerIds) : [];\n    const byPk = Object.fromEntries(provs.map(p => [p.id, p]));\n\n    const providersByFixture: Record<number, Provider[]> = {};\n    providersByFixture[row.id] = bcasts.map(b => {\n      const p = byPk[String(b.provider_id)];\n      return p ? { ...p } : null;\n    }).filter(Boolean) as Provider[];\n    \n    return mapFixtureRow(row, providersByFixture);\n  } catch (e) {\n    console.warn('[Supabase] getFixtureById error', e);\n    return undefined;\n  }\n}\n\n// Admin API functions\n\nexport interface AdminFixture extends Fixture {\n  broadcast?: {\n    provider_id: number;\n    provider_display_name?: string;\n    channel?: string;\n  } | null;\n}\n\nexport const BROADCASTERS = [\n  { id: 1, name: 'Sky Sports', type: 'tv' },\n  { id: 2, name: 'TNT Sports', type: 'tv' },\n  { id: 3, name: 'BBC Sport', type: 'tv' },\n  { id: 4, name: 'Amazon Prime Video', type: 'streaming' },\n  { id: -1, name: 'ðŸš« Blackout (No TV)', type: 'blackout' }\n];\n\nexport async function getAdminFixtures(competitionId: number = 1): Promise<AdminFixture[]> {\n  try {\n    // Get fixtures from current season\n    const currentSeasonStart = '2024-08-01T00:00:00.000Z';\n    \n    const { data: rows, error } = await supabase\n      .from('fixtures_with_teams')\n      .select(`\n        id,matchday,utc_kickoff,venue,status,\n        home_team_id,home_team,home_slug,home_crest,\n        away_team_id,away_team,away_slug,away_crest\n      `)\n      .eq('competition_id', competitionId)\n      .gte('utc_kickoff', currentSeasonStart)\n      .order('utc_kickoff', { ascending: true });\n      \n    if (error) {\n      console.warn('[Supabase] getAdminFixtures error', error);\n      return [];\n    }\n    \n    if (!rows || !rows.length) return [];\n\n    // Apply same filtering as main app (exclude test fixtures)\n    const validRows = rows.filter(r => r.id && r.id > 30);\n    \n    // Get all broadcasts for these fixtures\n    const fixtureIds = validRows.map(r => r.id);\n    const { data: broadcasts, error: broadcastError } = await supabase\n      .from('broadcasts')\n      .select('fixture_id,provider_id')\n      .in('fixture_id', fixtureIds);\n      \n    if (broadcastError) {\n      console.warn('[Supabase] Error loading broadcasts:', broadcastError);\n    }\n    \n    // Create broadcast lookup\n    const broadcastLookup: Record<number, BroadcastRow> = {};\n    (broadcasts || []).forEach(b => {\n      broadcastLookup[b.fixture_id] = b;\n    });\n    \n    // Map fixtures with broadcast info\n    const adminFixtures: AdminFixture[] = validRows.map(row => {\n      const broadcast = broadcastLookup[row.id] || null;\n      const fixture = mapFixtureRow(row);\n      \n      return {\n        ...fixture,\n        broadcast: broadcast ? {\n          provider_id: broadcast.provider_id,\n          provider_display_name: BROADCASTERS.find(b => b.id === broadcast.provider_id)?.name || 'Unknown'\n        } : null\n      };\n    });\n    \n    return adminFixtures;\n  } catch (e) {\n    console.warn('[Supabase] getAdminFixtures error', e);\n    return [];\n  }\n}\n\nexport async function saveBroadcast(fixtureId: number, providerId: number | string | null): Promise<void> {\n  try {\n    if (providerId === '' || providerId === '0' || providerId === '-1' || providerId === null) {\n      // Delete existing broadcast record\n      const { error } = await supabase\n        .from('broadcasts')\n        .delete()\n        .eq('fixture_id', fixtureId);\n        \n      if (error) {\n        throw error;\n      }\n      \n      // Handle blackout localStorage logic\n      if (providerId === '-1') {\n        const blackoutFixtures = JSON.parse(localStorage.getItem('blackoutFixtures') || '[]');\n        if (!blackoutFixtures.includes(fixtureId)) {\n          blackoutFixtures.push(fixtureId);\n          localStorage.setItem('blackoutFixtures', JSON.stringify(blackoutFixtures));\n        }\n      } else {\n        // Remove from blackout list if setting to empty\n        const blackoutFixtures = JSON.parse(localStorage.getItem('blackoutFixtures') || '[]');\n        const updatedBlackout = blackoutFixtures.filter((id: number) => id !== fixtureId);\n        localStorage.setItem('blackoutFixtures', JSON.stringify(updatedBlackout));\n      }\n    } else {\n      // Add/update broadcaster - remove from blackout list first\n      const blackoutFixtures = JSON.parse(localStorage.getItem('blackoutFixtures') || '[]');\n      const updatedBlackout = blackoutFixtures.filter((id: number) => id !== fixtureId);\n      localStorage.setItem('blackoutFixtures', JSON.stringify(updatedBlackout));\n      \n      const broadcastData = {\n        fixture_id: fixtureId,\n        provider_id: parseInt(String(providerId))\n      };\n      \n      // Upsert the broadcast record\n      const { error } = await supabase\n        .from('broadcasts')\n        .upsert(broadcastData);\n        \n      if (error) {\n        throw error;\n      }\n    }\n  } catch (e) {\n    console.error('[Supabase] saveBroadcast error', e);\n    throw e;\n  }\n}\n\n// Blackout helper functions\nexport function isFixtureBlackout(fixtureId: number): boolean {\n  const blackoutFixtures = JSON.parse(localStorage.getItem('blackoutFixtures') || '[]');\n  return blackoutFixtures.includes(fixtureId);\n}\n\nexport function isFixtureConfirmed(fixture: AdminFixture): boolean {\n  return !!(fixture.broadcast && fixture.broadcast.provider_id && !isFixtureBlackout(fixture.id));\n}\n\nexport function isFixturePending(fixture: AdminFixture): boolean {\n  return !fixture.broadcast && !isFixtureBlackout(fixture.id);\n}\n\n// Teams API\nexport async function getTeams(): Promise<Team[]> {\n  try {\n    const { data, error } = await supabase\n      .from('teams')\n      .select('id,name,slug,crest_url')\n      .eq('is_active', true)\n      .order('name', { ascending: true });\n\n    if (error) {\n      console.warn('[Supabase] getTeams error', error);\n      return [];\n    }\n    return (data || []).map((t: any) => ({\n      id: t.id,\n      name: t.name,\n      slug: t.slug,\n      crest: t.crest_url ?? null,\n    }));\n  } catch (e) {\n    console.warn('[Supabase] getTeams error', e);\n    return [];\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}