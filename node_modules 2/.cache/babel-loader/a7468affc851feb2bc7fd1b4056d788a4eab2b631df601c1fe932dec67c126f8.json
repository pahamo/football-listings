{"ast":null,"code":"import { createClient } from '@supabase/supabase-js';\nconst supabaseUrl = 'https://nkfuzkrazehjivzmdrvt.supabase.co';\nconst supabaseAnonKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im5rZnV6a3JhemVoaml2em1kcnZ0Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTcyNjI5MzAsImV4cCI6MjA3MjgzODkzMH0.CNW1EUtcC4JWfDy-WzOIVDfv7rnXzsz1qqQyRTZVyXU';\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey);\n\n// Simple, minimal types\n\n// Only Sky Sports and TNT Sports for simplicity\nexport const SIMPLE_BROADCASTERS = [{\n  id: 1,\n  name: 'Sky Sports'\n}, {\n  id: 2,\n  name: 'TNT Sports'\n}];\n\n// Get fixtures with basic team info using simple JOINs\nexport async function getSimpleFixtures() {\n  try {\n    console.log('[Supabase] Loading fixtures with basic table JOINs...');\n\n    // Use basic tables with simple JOINs - no views\n    const {\n      data: fixtures,\n      error\n    } = await supabase.from('fixtures').select(`\n        id,\n        utc_kickoff,\n        home_team_id,\n        away_team_id,\n        home_team:home_team_id(name),\n        away_team:away_team_id(name)\n      `).gte('utc_kickoff', '2024-08-01T00:00:00.000Z').order('utc_kickoff', {\n      ascending: true\n    }).limit(20);\n    if (error) {\n      console.error('[Supabase] Error loading fixtures:', error);\n      return [];\n    }\n    if (!fixtures) {\n      console.warn('[Supabase] No fixtures returned');\n      return [];\n    }\n    console.log(`[Supabase] Loaded ${fixtures.length} fixtures successfully`);\n\n    // Get broadcast data for these fixtures\n    const fixtureIds = fixtures.map(f => f.id);\n    const {\n      data: broadcasts\n    } = await supabase.from('broadcasts').select('fixture_id, provider_id').in('fixture_id', fixtureIds);\n\n    // Create broadcast lookup\n    const broadcastLookup = {};\n    (broadcasts || []).forEach(b => {\n      broadcastLookup[b.fixture_id] = b.provider_id;\n    });\n\n    // Map to simple format\n    return fixtures.map(fixture => {\n      var _fixture$home_team, _fixture$away_team, _SIMPLE_BROADCASTERS$;\n      return {\n        id: fixture.id,\n        kickoff_utc: fixture.utc_kickoff,\n        home_team: ((_fixture$home_team = fixture.home_team) === null || _fixture$home_team === void 0 ? void 0 : _fixture$home_team.name) || 'Unknown',\n        away_team: ((_fixture$away_team = fixture.away_team) === null || _fixture$away_team === void 0 ? void 0 : _fixture$away_team.name) || 'Unknown',\n        broadcaster: ((_SIMPLE_BROADCASTERS$ = SIMPLE_BROADCASTERS.find(b => b.id === broadcastLookup[fixture.id])) === null || _SIMPLE_BROADCASTERS$ === void 0 ? void 0 : _SIMPLE_BROADCASTERS$.name) || undefined\n      };\n    });\n  } catch (error) {\n    console.error('[Supabase] Unexpected error:', error);\n    return [];\n  }\n}\n\n// Save broadcaster assignment (simple)\nexport async function saveBroadcaster(fixtureId, providerId) {\n  try {\n    console.log(`[Supabase] Saving broadcaster for fixture ${fixtureId}: provider ${providerId}`);\n    if (!providerId) {\n      // Remove broadcaster\n      const {\n        error\n      } = await supabase.from('broadcasts').delete().eq('fixture_id', fixtureId);\n      if (error) throw error;\n      console.log(`[Supabase] Removed broadcaster for fixture ${fixtureId}`);\n    } else {\n      // Add/update broadcaster\n      const {\n        error\n      } = await supabase.from('broadcasts').upsert({\n        fixture_id: fixtureId,\n        provider_id: providerId\n      });\n      if (error) throw error;\n      console.log(`[Supabase] Saved broadcaster for fixture ${fixtureId}`);\n    }\n  } catch (error) {\n    console.error(`[Supabase] Error saving broadcaster:`, error);\n    throw error;\n  }\n}","map":{"version":3,"names":["createClient","supabaseUrl","supabaseAnonKey","supabase","SIMPLE_BROADCASTERS","id","name","getSimpleFixtures","console","log","data","fixtures","error","from","select","gte","order","ascending","limit","warn","length","fixtureIds","map","f","broadcasts","in","broadcastLookup","forEach","b","fixture_id","provider_id","fixture","_fixture$home_team","_fixture$away_team","_SIMPLE_BROADCASTERS$","kickoff_utc","utc_kickoff","home_team","away_team","broadcaster","find","undefined","saveBroadcaster","fixtureId","providerId","delete","eq","upsert"],"sources":["/Users/p/Documents/pl_tv_mvp_spa/react-version/src/services/supabase-simple.ts"],"sourcesContent":["import { createClient } from '@supabase/supabase-js';\n\nconst supabaseUrl = 'https://nkfuzkrazehjivzmdrvt.supabase.co';\nconst supabaseAnonKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im5rZnV6a3JhemVoaml2em1kcnZ0Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTcyNjI5MzAsImV4cCI6MjA3MjgzODkzMH0.CNW1EUtcC4JWfDy-WzOIVDfv7rnXzsz1qqQyRTZVyXU';\n\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey);\n\n// Simple, minimal types\nexport interface SimpleFixture {\n  id: number;\n  kickoff_utc: string;\n  home_team: string;\n  away_team: string;\n  broadcaster?: string;\n}\n\n// Only Sky Sports and TNT Sports for simplicity\nexport const SIMPLE_BROADCASTERS = [\n  { id: 1, name: 'Sky Sports' },\n  { id: 2, name: 'TNT Sports' }\n];\n\n// Get fixtures with basic team info using simple JOINs\nexport async function getSimpleFixtures(): Promise<SimpleFixture[]> {\n  try {\n    console.log('[Supabase] Loading fixtures with basic table JOINs...');\n    \n    // Use basic tables with simple JOINs - no views\n    const { data: fixtures, error } = await supabase\n      .from('fixtures')\n      .select(`\n        id,\n        utc_kickoff,\n        home_team_id,\n        away_team_id,\n        home_team:home_team_id(name),\n        away_team:away_team_id(name)\n      `)\n      .gte('utc_kickoff', '2024-08-01T00:00:00.000Z')\n      .order('utc_kickoff', { ascending: true })\n      .limit(20);\n      \n    if (error) {\n      console.error('[Supabase] Error loading fixtures:', error);\n      return [];\n    }\n    \n    if (!fixtures) {\n      console.warn('[Supabase] No fixtures returned');\n      return [];\n    }\n    \n    console.log(`[Supabase] Loaded ${fixtures.length} fixtures successfully`);\n    \n    // Get broadcast data for these fixtures\n    const fixtureIds = fixtures.map(f => f.id);\n    const { data: broadcasts } = await supabase\n      .from('broadcasts')\n      .select('fixture_id, provider_id')\n      .in('fixture_id', fixtureIds);\n    \n    // Create broadcast lookup\n    const broadcastLookup: Record<number, number> = {};\n    (broadcasts || []).forEach(b => {\n      broadcastLookup[b.fixture_id] = b.provider_id;\n    });\n    \n    // Map to simple format\n    return fixtures.map(fixture => ({\n      id: fixture.id,\n      kickoff_utc: fixture.utc_kickoff,\n      home_team: fixture.home_team?.name || 'Unknown',\n      away_team: fixture.away_team?.name || 'Unknown',\n      broadcaster: SIMPLE_BROADCASTERS.find(b => b.id === broadcastLookup[fixture.id])?.name || undefined\n    }));\n    \n  } catch (error) {\n    console.error('[Supabase] Unexpected error:', error);\n    return [];\n  }\n}\n\n// Save broadcaster assignment (simple)\nexport async function saveBroadcaster(fixtureId: number, providerId: number | null): Promise<void> {\n  try {\n    console.log(`[Supabase] Saving broadcaster for fixture ${fixtureId}: provider ${providerId}`);\n    \n    if (!providerId) {\n      // Remove broadcaster\n      const { error } = await supabase\n        .from('broadcasts')\n        .delete()\n        .eq('fixture_id', fixtureId);\n        \n      if (error) throw error;\n      console.log(`[Supabase] Removed broadcaster for fixture ${fixtureId}`);\n    } else {\n      // Add/update broadcaster\n      const { error } = await supabase\n        .from('broadcasts')\n        .upsert({\n          fixture_id: fixtureId,\n          provider_id: providerId\n        });\n        \n      if (error) throw error;\n      console.log(`[Supabase] Saved broadcaster for fixture ${fixtureId}`);\n    }\n  } catch (error) {\n    console.error(`[Supabase] Error saving broadcaster:`, error);\n    throw error;\n  }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}