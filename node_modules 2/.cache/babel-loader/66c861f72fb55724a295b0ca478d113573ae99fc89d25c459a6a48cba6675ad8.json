{"ast":null,"code":"import{supabase}from'./supabase';// Simple, minimal types\n// Only Sky Sports and TNT Sports for simplicity\nexport const SIMPLE_BROADCASTERS=[{id:1,name:'Sky Sports'},{id:2,name:'TNT Sports'}];// Get fixtures with basic team info using simple JOINs\nexport async function getSimpleFixtures(){try{console.log('[Supabase] Loading full season fixtures (no JOINs)...');// Step 1: Load fixture basics only\n// Use a dynamic season start (Aug 1 of current season year)\nconst now=new Date();const seasonYear=now.getUTCMonth()>=6?now.getUTCFullYear():now.getUTCFullYear()-1;const seasonStartIso=\"\".concat(seasonYear,\"-08-01T00:00:00.000Z\");const{data:fixtures,error}=await supabase.from('fixtures_with_teams').select('id, utc_kickoff, home_team_id, away_team_id, home_team, away_team, home_crest, away_crest, matchday').gte('utc_kickoff',seasonStartIso).order('utc_kickoff',{ascending:true});if(error){console.error('[Supabase] Error loading fixtures:',error);throw error;}if(!fixtures||fixtures.length===0){console.warn('[Supabase] No fixtures returned');return[];}// Team names are now included directly from fixtures_with_teams view\n// Step 3: Load broadcasts for these fixtures\nconst fixtureIds=fixtures.map(f=>f.id);const{data:broadcasts}=await supabase.from('broadcasts').select('fixture_id, provider_id').in('fixture_id',fixtureIds);const broadcastLookup={};(broadcasts||[]).forEach(b=>{broadcastLookup[b.fixture_id]=b.provider_id;});// Step 4: Map to simple format\nreturn fixtures.map(fixture=>{var _SIMPLE_BROADCASTERS$;return{id:fixture.id,kickoff_utc:fixture.utc_kickoff,home_team:fixture.home_team||'Unknown',away_team:fixture.away_team||'Unknown',home_crest:fixture.home_crest||undefined,away_crest:fixture.away_crest||undefined,matchweek:fixture.matchday||undefined,broadcaster:((_SIMPLE_BROADCASTERS$=SIMPLE_BROADCASTERS.find(b=>b.id===broadcastLookup[fixture.id]))===null||_SIMPLE_BROADCASTERS$===void 0?void 0:_SIMPLE_BROADCASTERS$.name)||undefined};});}catch(error){console.error('[Supabase] Unexpected error:',error);return[];}}// Save broadcaster assignment (simple)\nexport async function saveBroadcaster(fixtureId,providerId){try{console.log(\"[Supabase] Saving broadcaster for fixture \".concat(fixtureId,\": provider \").concat(providerId));if(providerId===-1){// Blackout: remove any broadcaster and mark blackout in localStorage\nconst{error}=await supabase.from('broadcasts').delete().eq('fixture_id',fixtureId);if(error)throw error;const blackoutFixtures=JSON.parse(localStorage.getItem('blackoutFixtures')||'[]');if(!blackoutFixtures.includes(fixtureId)){blackoutFixtures.push(fixtureId);localStorage.setItem('blackoutFixtures',JSON.stringify(blackoutFixtures));}console.log(\"[Supabase] Set blackout for fixture \".concat(fixtureId));}else if(!providerId){// Remove broadcaster and clear blackout flag\nconst{error}=await supabase.from('broadcasts').delete().eq('fixture_id',fixtureId);if(error)throw error;const blackoutFixtures=JSON.parse(localStorage.getItem('blackoutFixtures')||'[]');const updated=blackoutFixtures.filter(id=>id!==fixtureId);localStorage.setItem('blackoutFixtures',JSON.stringify(updated));console.log(\"[Supabase] Removed broadcaster for fixture \".concat(fixtureId));}else{// Add/update broadcaster and clear blackout flag\n// First delete any existing broadcasts for this fixture to avoid conflicts\nawait supabase.from('broadcasts').delete().eq('fixture_id',fixtureId);// Then insert the new broadcast\nconst{error}=await supabase.from('broadcasts').insert({fixture_id:fixtureId,provider_id:providerId});if(error)throw error;const blackoutFixtures=JSON.parse(localStorage.getItem('blackoutFixtures')||'[]');const updated=blackoutFixtures.filter(id=>id!==fixtureId);localStorage.setItem('blackoutFixtures',JSON.stringify(updated));console.log(\"[Supabase] Saved broadcaster for fixture \".concat(fixtureId));}}catch(error){console.error(\"[Supabase] Error saving broadcaster:\",error);throw error;}}","map":{"version":3,"names":["supabase","SIMPLE_BROADCASTERS","id","name","getSimpleFixtures","console","log","now","Date","seasonYear","getUTCMonth","getUTCFullYear","seasonStartIso","concat","data","fixtures","error","from","select","gte","order","ascending","length","warn","fixtureIds","map","f","broadcasts","in","broadcastLookup","forEach","b","fixture_id","provider_id","fixture","_SIMPLE_BROADCASTERS$","kickoff_utc","utc_kickoff","home_team","away_team","home_crest","undefined","away_crest","matchweek","matchday","broadcaster","find","saveBroadcaster","fixtureId","providerId","delete","eq","blackoutFixtures","JSON","parse","localStorage","getItem","includes","push","setItem","stringify","updated","filter","insert"],"sources":["/Users/p/Documents/pl_tv_mvp_spa/react-version/src/services/supabase-simple.ts"],"sourcesContent":["import { supabase } from './supabase';\n\n// Simple, minimal types\nexport interface SimpleFixture {\n  id: number;\n  kickoff_utc: string;\n  home_team: string;\n  away_team: string;\n  home_crest?: string;\n  away_crest?: string;\n  broadcaster?: string;\n  matchweek?: number;\n}\n\n// Only Sky Sports and TNT Sports for simplicity\nexport const SIMPLE_BROADCASTERS = [\n  { id: 1, name: 'Sky Sports' },\n  { id: 2, name: 'TNT Sports' }\n];\n\n// Get fixtures with basic team info using simple JOINs\nexport async function getSimpleFixtures(): Promise<SimpleFixture[]> {\n  try {\n    console.log('[Supabase] Loading full season fixtures (no JOINs)...');\n\n    // Step 1: Load fixture basics only\n    // Use a dynamic season start (Aug 1 of current season year)\n    const now = new Date();\n    const seasonYear = now.getUTCMonth() >= 6 ? now.getUTCFullYear() : now.getUTCFullYear() - 1;\n    const seasonStartIso = `${seasonYear}-08-01T00:00:00.000Z`;\n\n    const { data: fixtures, error } = await supabase\n      .from('fixtures_with_teams')\n      .select('id, utc_kickoff, home_team_id, away_team_id, home_team, away_team, home_crest, away_crest, matchday')\n      .gte('utc_kickoff', seasonStartIso)\n      .order('utc_kickoff', { ascending: true });\n\n    if (error) {\n      console.error('[Supabase] Error loading fixtures:', error);\n      throw error;\n    }\n    if (!fixtures || fixtures.length === 0) {\n      console.warn('[Supabase] No fixtures returned');\n      return [];\n    }\n\n    // Team names are now included directly from fixtures_with_teams view\n\n    // Step 3: Load broadcasts for these fixtures\n    const fixtureIds = fixtures.map((f: any) => f.id);\n    const { data: broadcasts } = await supabase\n      .from('broadcasts')\n      .select('fixture_id, provider_id')\n      .in('fixture_id', fixtureIds);\n\n    const broadcastLookup: Record<number, number> = {};\n    (broadcasts || []).forEach((b: any) => {\n      broadcastLookup[b.fixture_id] = b.provider_id;\n    });\n\n    // Step 4: Map to simple format\n    return fixtures.map((fixture: any) => ({\n      id: fixture.id,\n      kickoff_utc: fixture.utc_kickoff,\n      home_team: fixture.home_team || 'Unknown',\n      away_team: fixture.away_team || 'Unknown',\n      home_crest: fixture.home_crest || undefined,\n      away_crest: fixture.away_crest || undefined,\n      matchweek: fixture.matchday || undefined,\n      broadcaster: SIMPLE_BROADCASTERS.find(b => b.id === broadcastLookup[fixture.id])?.name || undefined,\n    }));\n  } catch (error) {\n    console.error('[Supabase] Unexpected error:', error);\n    return [];\n  }\n}\n\n// Save broadcaster assignment (simple)\nexport async function saveBroadcaster(fixtureId: number, providerId: number | null): Promise<void> {\n  try {\n    console.log(`[Supabase] Saving broadcaster for fixture ${fixtureId}: provider ${providerId}`);\n    \n    if (providerId === -1) {\n      // Blackout: remove any broadcaster and mark blackout in localStorage\n      const { error } = await supabase\n        .from('broadcasts')\n        .delete()\n        .eq('fixture_id', fixtureId);\n      if (error) throw error;\n\n      const blackoutFixtures = JSON.parse(localStorage.getItem('blackoutFixtures') || '[]');\n      if (!blackoutFixtures.includes(fixtureId)) {\n        blackoutFixtures.push(fixtureId);\n        localStorage.setItem('blackoutFixtures', JSON.stringify(blackoutFixtures));\n      }\n      console.log(`[Supabase] Set blackout for fixture ${fixtureId}`);\n\n    } else if (!providerId) {\n      // Remove broadcaster and clear blackout flag\n      const { error } = await supabase\n        .from('broadcasts')\n        .delete()\n        .eq('fixture_id', fixtureId);\n        \n      if (error) throw error;\n      const blackoutFixtures = JSON.parse(localStorage.getItem('blackoutFixtures') || '[]');\n      const updated = blackoutFixtures.filter((id: number) => id !== fixtureId);\n      localStorage.setItem('blackoutFixtures', JSON.stringify(updated));\n      console.log(`[Supabase] Removed broadcaster for fixture ${fixtureId}`);\n    } else {\n      // Add/update broadcaster and clear blackout flag\n      // First delete any existing broadcasts for this fixture to avoid conflicts\n      await supabase\n        .from('broadcasts')\n        .delete()\n        .eq('fixture_id', fixtureId);\n\n      // Then insert the new broadcast\n      const { error } = await supabase\n        .from('broadcasts')\n        .insert({\n          fixture_id: fixtureId,\n          provider_id: providerId\n        });\n        \n      if (error) throw error;\n      const blackoutFixtures = JSON.parse(localStorage.getItem('blackoutFixtures') || '[]');\n      const updated = blackoutFixtures.filter((id: number) => id !== fixtureId);\n      localStorage.setItem('blackoutFixtures', JSON.stringify(updated));\n      console.log(`[Supabase] Saved broadcaster for fixture ${fixtureId}`);\n    }\n  } catch (error) {\n    console.error(`[Supabase] Error saving broadcaster:`, error);\n    throw error;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}