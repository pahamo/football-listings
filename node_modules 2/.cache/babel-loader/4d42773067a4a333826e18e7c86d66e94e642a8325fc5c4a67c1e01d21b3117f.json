{"ast":null,"code":"import{createClient}from'@supabase/supabase-js';// Get credentials from environment variables with fallbacks\nconst supabaseUrl=process.env.REACT_APP_SUPABASE_URL||'https://nkfuzkrazehjivzmdrvt.supabase.co';const supabaseAnonKey=process.env.REACT_APP_SUPABASE_ANON_KEY||'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im5rZnV6a3JhemVoaml2em1kcnZ0Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTcyNjI5MzAsImV4cCI6MjA3MjgzODkzMH0.CNW1EUtcC4JWfDy-WzOIVDfv7rnXzsz1qqQyRTZVyXU';// Log a warning if using fallback credentials\nif(!process.env.REACT_APP_SUPABASE_URL||!process.env.REACT_APP_SUPABASE_ANON_KEY){console.warn('[Supabase Simple] Using fallback credentials. Consider setting REACT_APP_SUPABASE_URL and REACT_APP_SUPABASE_ANON_KEY in your .env file.');}export const supabase=createClient(supabaseUrl,supabaseAnonKey);// Simple, minimal types\n// Only Sky Sports and TNT Sports for simplicity\nexport const SIMPLE_BROADCASTERS=[{id:1,name:'Sky Sports'},{id:2,name:'TNT Sports'}];// Get fixtures with basic team info using simple JOINs\nexport async function getSimpleFixtures(){try{console.log('[Supabase] Loading fixtures (no JOINs)...');// Step 1: Load fixture basics only\n// Use a dynamic season start (Aug 1 of current season year)\nconst now=new Date();const seasonYear=now.getUTCMonth()>=6?now.getUTCFullYear():now.getUTCFullYear()-1;const seasonStartIso=\"\".concat(seasonYear,\"-08-01T00:00:00.000Z\");const{data:fixtures,error}=await supabase.from('fixtures').select('id, utc_kickoff, home_team_id, away_team_id').gte('utc_kickoff',seasonStartIso).order('utc_kickoff',{ascending:true}).limit(20);if(error){console.error('[Supabase] Error loading fixtures:',error);throw error;}if(!fixtures||fixtures.length===0){console.warn('[Supabase] No fixtures returned');return[];}// Step 2: Load team names in one query\nconst teamIds=Array.from(new Set([...fixtures.map(f=>f.home_team_id),...fixtures.map(f=>f.away_team_id)].filter(Boolean)));let teamNameById={};if(teamIds.length>0){const{data:teams,error:teamError}=await supabase.from('teams').select('id, name').in('id',teamIds);if(teamError){console.warn('[Supabase] Error loading teams:',teamError);}else{(teams||[]).forEach(t=>{teamNameById[t.id]=t.name;});}}// Step 3: Load broadcasts for these fixtures\nconst fixtureIds=fixtures.map(f=>f.id);const{data:broadcasts}=await supabase.from('broadcasts').select('fixture_id, provider_id').in('fixture_id',fixtureIds);const broadcastLookup={};(broadcasts||[]).forEach(b=>{broadcastLookup[b.fixture_id]=b.provider_id;});// Step 4: Map to simple format\nreturn fixtures.map(fixture=>{var _SIMPLE_BROADCASTERS$;return{id:fixture.id,kickoff_utc:fixture.utc_kickoff,home_team:teamNameById[fixture.home_team_id]||'Unknown',away_team:teamNameById[fixture.away_team_id]||'Unknown',broadcaster:((_SIMPLE_BROADCASTERS$=SIMPLE_BROADCASTERS.find(b=>b.id===broadcastLookup[fixture.id]))===null||_SIMPLE_BROADCASTERS$===void 0?void 0:_SIMPLE_BROADCASTERS$.name)||undefined};});}catch(error){console.error('[Supabase] Unexpected error:',error);return[];}}// Save broadcaster assignment (simple)\nexport async function saveBroadcaster(fixtureId,providerId){try{console.log(\"[Supabase] Saving broadcaster for fixture \".concat(fixtureId,\": provider \").concat(providerId));if(!providerId){// Remove broadcaster\nconst{error}=await supabase.from('broadcasts').delete().eq('fixture_id',fixtureId);if(error)throw error;console.log(\"[Supabase] Removed broadcaster for fixture \".concat(fixtureId));}else{// Add/update broadcaster\nconst{error}=await supabase.from('broadcasts').upsert({fixture_id:fixtureId,provider_id:providerId});if(error)throw error;console.log(\"[Supabase] Saved broadcaster for fixture \".concat(fixtureId));}}catch(error){console.error(\"[Supabase] Error saving broadcaster:\",error);throw error;}}","map":{"version":3,"names":["createClient","supabaseUrl","process","env","REACT_APP_SUPABASE_URL","supabaseAnonKey","REACT_APP_SUPABASE_ANON_KEY","console","warn","supabase","SIMPLE_BROADCASTERS","id","name","getSimpleFixtures","log","now","Date","seasonYear","getUTCMonth","getUTCFullYear","seasonStartIso","concat","data","fixtures","error","from","select","gte","order","ascending","limit","length","teamIds","Array","Set","map","f","home_team_id","away_team_id","filter","Boolean","teamNameById","teams","teamError","in","forEach","t","fixtureIds","broadcasts","broadcastLookup","b","fixture_id","provider_id","fixture","_SIMPLE_BROADCASTERS$","kickoff_utc","utc_kickoff","home_team","away_team","broadcaster","find","undefined","saveBroadcaster","fixtureId","providerId","delete","eq","upsert"],"sources":["/Users/p/Documents/pl_tv_mvp_spa/react-version/src/services/supabase-simple.ts"],"sourcesContent":["import { createClient } from '@supabase/supabase-js';\n\n// Get credentials from environment variables with fallbacks\nconst supabaseUrl = process.env.REACT_APP_SUPABASE_URL || 'https://nkfuzkrazehjivzmdrvt.supabase.co';\nconst supabaseAnonKey = process.env.REACT_APP_SUPABASE_ANON_KEY || 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im5rZnV6a3JhemVoaml2em1kcnZ0Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTcyNjI5MzAsImV4cCI6MjA3MjgzODkzMH0.CNW1EUtcC4JWfDy-WzOIVDfv7rnXzsz1qqQyRTZVyXU';\n\n// Log a warning if using fallback credentials\nif (!process.env.REACT_APP_SUPABASE_URL || !process.env.REACT_APP_SUPABASE_ANON_KEY) {\n  console.warn('[Supabase Simple] Using fallback credentials. Consider setting REACT_APP_SUPABASE_URL and REACT_APP_SUPABASE_ANON_KEY in your .env file.');\n}\n\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey);\n\n// Simple, minimal types\nexport interface SimpleFixture {\n  id: number;\n  kickoff_utc: string;\n  home_team: string;\n  away_team: string;\n  broadcaster?: string;\n}\n\n// Only Sky Sports and TNT Sports for simplicity\nexport const SIMPLE_BROADCASTERS = [\n  { id: 1, name: 'Sky Sports' },\n  { id: 2, name: 'TNT Sports' }\n];\n\n// Get fixtures with basic team info using simple JOINs\nexport async function getSimpleFixtures(): Promise<SimpleFixture[]> {\n  try {\n    console.log('[Supabase] Loading fixtures (no JOINs)...');\n\n    // Step 1: Load fixture basics only\n    // Use a dynamic season start (Aug 1 of current season year)\n    const now = new Date();\n    const seasonYear = now.getUTCMonth() >= 6 ? now.getUTCFullYear() : now.getUTCFullYear() - 1;\n    const seasonStartIso = `${seasonYear}-08-01T00:00:00.000Z`;\n\n    const { data: fixtures, error } = await supabase\n      .from('fixtures')\n      .select('id, utc_kickoff, home_team_id, away_team_id')\n      .gte('utc_kickoff', seasonStartIso)\n      .order('utc_kickoff', { ascending: true })\n      .limit(20);\n\n    if (error) {\n      console.error('[Supabase] Error loading fixtures:', error);\n      throw error;\n    }\n    if (!fixtures || fixtures.length === 0) {\n      console.warn('[Supabase] No fixtures returned');\n      return [];\n    }\n\n    // Step 2: Load team names in one query\n    const teamIds = Array.from(\n      new Set([\n        ...fixtures.map((f: any) => f.home_team_id),\n        ...fixtures.map((f: any) => f.away_team_id),\n      ].filter(Boolean))\n    );\n\n    let teamNameById: Record<number, string> = {};\n    if (teamIds.length > 0) {\n      const { data: teams, error: teamError } = await supabase\n        .from('teams')\n        .select('id, name')\n        .in('id', teamIds);\n      if (teamError) {\n        console.warn('[Supabase] Error loading teams:', teamError);\n      } else {\n        (teams || []).forEach((t: any) => {\n          teamNameById[t.id] = t.name;\n        });\n      }\n    }\n\n    // Step 3: Load broadcasts for these fixtures\n    const fixtureIds = fixtures.map((f: any) => f.id);\n    const { data: broadcasts } = await supabase\n      .from('broadcasts')\n      .select('fixture_id, provider_id')\n      .in('fixture_id', fixtureIds);\n\n    const broadcastLookup: Record<number, number> = {};\n    (broadcasts || []).forEach((b: any) => {\n      broadcastLookup[b.fixture_id] = b.provider_id;\n    });\n\n    // Step 4: Map to simple format\n    return fixtures.map((fixture: any) => ({\n      id: fixture.id,\n      kickoff_utc: fixture.utc_kickoff,\n      home_team: teamNameById[fixture.home_team_id] || 'Unknown',\n      away_team: teamNameById[fixture.away_team_id] || 'Unknown',\n      broadcaster: SIMPLE_BROADCASTERS.find(b => b.id === broadcastLookup[fixture.id])?.name || undefined,\n    }));\n  } catch (error) {\n    console.error('[Supabase] Unexpected error:', error);\n    return [];\n  }\n}\n\n// Save broadcaster assignment (simple)\nexport async function saveBroadcaster(fixtureId: number, providerId: number | null): Promise<void> {\n  try {\n    console.log(`[Supabase] Saving broadcaster for fixture ${fixtureId}: provider ${providerId}`);\n    \n    if (!providerId) {\n      // Remove broadcaster\n      const { error } = await supabase\n        .from('broadcasts')\n        .delete()\n        .eq('fixture_id', fixtureId);\n        \n      if (error) throw error;\n      console.log(`[Supabase] Removed broadcaster for fixture ${fixtureId}`);\n    } else {\n      // Add/update broadcaster\n      const { error } = await supabase\n        .from('broadcasts')\n        .upsert({\n          fixture_id: fixtureId,\n          provider_id: providerId\n        });\n        \n      if (error) throw error;\n      console.log(`[Supabase] Saved broadcaster for fixture ${fixtureId}`);\n    }\n  } catch (error) {\n    console.error(`[Supabase] Error saving broadcaster:`, error);\n    throw error;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}